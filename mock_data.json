[
		{
			"title": "Noteworthy projects based on Blockchain Technology",
			"link": "https://lightrains.com/blogs/noteworthy-blockchain-projects",
			"guid": "https://lightrains.com/blogs/noteworthy-blockchain-projects",
			"pubDate": "Wed, 28 Sep 2016 05:10:00 +0530",
			"categories": [
				"Blockchain",
				"Blockchain Projects"
			],
			"author": "",
			"thumbnail": "",
			"description": "Decentralized network existed before blockchain. But the key innovation of blockchain is its ability to hold the economic value, as pioneered as Bitcoin network. Currently, the blockchain is used in broad range of decentralized applications in many areas, including commerce, social media, content sharing, internet services, logistics and even government. Here are some Blockchain and Ethereum based projects. Git Money (Bitcoin) Git Money allows anyone to earn money by solving open issues on GitHub. Repository owners put up bounties for tasks and the reward is automatically paid to whoever submits the first successfully merged pull request. How it works Git opportunities: Every day people and companies are paying to get quick assistance with small tasks, find one suitable for you. Git work: An email a day will give you the list of work so that you can choose your work to get paid Get paid: Complete a task, provide your bitcoin address and get paid instantly. Augur (Ethereum) Augur is a prediction market platform that rewards for correctly predicting the future real-world events. Make the predictions by trading virtual shares in the outcome of events happening in the real world, buy shares in those outcomes. If the shares are in correct outcome you’ll win real money as profit. Features No central servers Create your own market Low fees Crowdsourced reporting Safe, automated payments TransActive Grid (Ethereum) TransActive Grid allows neighbors to purchase and sell renewable energy among each other, offering communities with microgrids a way to create a local energy market while reducing emissions and pollution. How it works Distributed Energy Resources: Brooklyn Microgrid is a distributed energy development group in the Park Slope and Gowanus communities of Brooklyn, New York creating a connected network for local energy. TransActive Grid: TransActive Grid is combination of ​software ​and hardware ​that enables...",
			"content": "Decentralized network existed before blockchain. But the key innovation of blockchain is its ability to hold the economic value, as pioneered as Bitcoin network. Currently, the blockchain is used in broad range of decentralized applications in many areas, including commerce, social media, content sharing, internet services, logistics and even government. Here are some Blockchain and Ethereum based projects. Git Money (Bitcoin) Git Money allows anyone to earn money by solving open issues on GitHub. Repository owners put up bounties for tasks and the reward is automatically paid to whoever submits the first successfully merged pull request. How it works Git opportunities: Every day people and companies are paying to get quick assistance with small tasks, find one suitable for you. Git work: An email a day will give you the list of work so that you can choose your work to get paid Get paid: Complete a task, provide your bitcoin address and get paid instantly. Augur (Ethereum) Augur is a prediction market platform that rewards for correctly predicting the future real-world events. Make the predictions by trading virtual shares in the outcome of events happening in the real world, buy shares in those outcomes. If the shares are in correct outcome you’ll win real money as profit. Features No central servers Create your own market Low fees Crowdsourced reporting Safe, automated payments TransActive Grid (Ethereum) TransActive Grid allows neighbors to purchase and sell renewable energy among each other, offering communities with microgrids a way to create a local energy market while reducing emissions and pollution. How it works Distributed Energy Resources: Brooklyn Microgrid is a distributed energy development group in the Park Slope and Gowanus communities of Brooklyn, New York creating a connected network for local energy. TransActive Grid: TransActive Grid is combination of ​software ​and hardware ​that enables..."
		},
		{
			"title": "Open source Blockchain platforms",
			"link": "https://lightrains.com/blogs/opensource-blockchain-platforms",
			"guid": "https://lightrains.com/blogs/opensource-blockchain-platforms",
			"pubDate": "Thu, 22 Sep 2016 05:10:00 +0530",
			"categories": [
				"Blockchain",
				"Platforms",
				"Development Tools",
				"Open Source"
			],
			"author": "",
			"thumbnail": "",
			"description": "Open source software is revolutionizing technology by enabling companies to speed development, reduce costs, increase innovation, and improve efficiency. Never before has any open source project generated as much attention on the international stage as Bitcoin. But now a days the world is looking into open source Blockchain platforms. Here are some open source Blockchain platforms. 1. Eris erisindustries.com A software that allows anyone to create their own secure, low-cost and run anywhere application using Blockchain and smart contract technology. Communities, government and anybody else can use smart contracts to automate their business with Eris. Eris is free software that allows anyone to build their own secure, low-cost, run-anywhere applications using blockchain and smart contract technology. Features Services: Things that you turn on and off Chains: Develop permissioned chains Contracts: There is a smart contract tool chain in Eris Actions: Every action is step by step. 2. HydraChain hydrachain.com HydraChain is an extension of the Ethereum platform which adds support for creating Permissioned Distributed Ledgers. Its primary domain of application are private chain or consortium chain setups especially in the financial industry. Features Full compatibility to the Ethereum Protocol Accountable Validators Instant finality Native Contracts Customizability Easy Deployment Open source Commercial support 3. MultiChain multichain.com Allows organizations to rapidly design, deploy and operate Distributed ledgers Features Managed Permission Rapid deployment Native asset support Customizable Bitcoin compatible Extendable 4. OpenChain openchain.org Openchain is an open source distributed ledger technology. It is suited for organizations wishing to issue and manage digital assets in a robust, secure and scalable way. Anyone can spin up a new Openchain instance within seconds. The administrator of an Openchain instance defines the rules of the ledger. End-users can exchange value on the ledger according to those rules. Every transaction on the ledger is digitally signed, like with...",
			"content": "Open source software is revolutionizing technology by enabling companies to speed development, reduce costs, increase innovation, and improve efficiency. Never before has any open source project generated as much attention on the international stage as Bitcoin. But now a days the world is looking into open source Blockchain platforms. Here are some open source Blockchain platforms. 1. Eris erisindustries.com A software that allows anyone to create their own secure, low-cost and run anywhere application using Blockchain and smart contract technology. Communities, government and anybody else can use smart contracts to automate their business with Eris. Eris is free software that allows anyone to build their own secure, low-cost, run-anywhere applications using blockchain and smart contract technology. Features Services: Things that you turn on and off Chains: Develop permissioned chains Contracts: There is a smart contract tool chain in Eris Actions: Every action is step by step. 2. HydraChain hydrachain.com HydraChain is an extension of the Ethereum platform which adds support for creating Permissioned Distributed Ledgers. Its primary domain of application are private chain or consortium chain setups especially in the financial industry. Features Full compatibility to the Ethereum Protocol Accountable Validators Instant finality Native Contracts Customizability Easy Deployment Open source Commercial support 3. MultiChain multichain.com Allows organizations to rapidly design, deploy and operate Distributed ledgers Features Managed Permission Rapid deployment Native asset support Customizable Bitcoin compatible Extendable 4. OpenChain openchain.org Openchain is an open source distributed ledger technology. It is suited for organizations wishing to issue and manage digital assets in a robust, secure and scalable way. Anyone can spin up a new Openchain instance within seconds. The administrator of an Openchain instance defines the rules of the ledger. End-users can exchange value on the ledger according to those rules. Every transaction on the ledger is digitally signed, like with..."
		},
		{
			"title": "Functional Programming in JavaScript",
			"link": "https://lightrains.com/blogs/functional-javascript-es6-introduction",
			"guid": "https://lightrains.com/blogs/functional-javascript-es6-introduction",
			"pubDate": "Wed, 21 Sep 2016 05:10:00 +0530",
			"categories": [
				"Functional JavaScript",
				"ES6",
				"JavaScript",
				"Functional Programming"
			],
			"author": "",
			"thumbnail": "",
			"description": "In computer science, functional programming is a programming paradigm—a style of building the structure and elements of computer programs—that treats computation as the evaluation of mathematical functions and avoids changing-state and mutable data. It is a declarative programming paradigm, which means programming is done with expressions or declarations instead of statements. wiki If you’re looking for a quick start in Functional Programming, JavaScript is the perfect language for you. Here’s why: Almost all programmers have tweaked and / or written JavaScript code at some point of time — hence there should be a certain familiarity JavaScript comes as close to a standardized programming language we’ll get — it’s the only programming language available across all web browsers JavaScript comes with a very familiar C like syntax and should be readable to most programmers Functions have always been first class members in JavaScript, support for Functional Programming is very good and in many ways JavaScript has been ahead of its time JavaScript doesn’t have Java like Class based Object Oriented Programming support so in many ways you’re forced to be Functional in JavaScript Main fancy words you will hear Pure functions Higher-order functions Recursion Functor Compose Destructuring Currying Pure functions Returns the same result given same parameters. It’s execution doesn’t depend on the state of the system. 1) Impure let number = 1; const increment = () =&gt; number += 1; increment(); // 2 2) Pure const increment = n =&gt; n + 1; increment(1); // 2 Higher-order functions Functions that operate on other functions, either by taking them as arguments or by returning them. 1) Sum const sum = (x, y) =&gt; x + y; const calculate = (fn, x, y) =&gt; fn(x, y); calculate(sum, 1, 2); // 3 2) Filter let students = [ {name: 'Anna', grade: 6}, {name:...",
			"content": "In computer science, functional programming is a programming paradigm—a style of building the structure and elements of computer programs—that treats computation as the evaluation of mathematical functions and avoids changing-state and mutable data. It is a declarative programming paradigm, which means programming is done with expressions or declarations instead of statements. wiki If you’re looking for a quick start in Functional Programming, JavaScript is the perfect language for you. Here’s why: Almost all programmers have tweaked and / or written JavaScript code at some point of time — hence there should be a certain familiarity JavaScript comes as close to a standardized programming language we’ll get — it’s the only programming language available across all web browsers JavaScript comes with a very familiar C like syntax and should be readable to most programmers Functions have always been first class members in JavaScript, support for Functional Programming is very good and in many ways JavaScript has been ahead of its time JavaScript doesn’t have Java like Class based Object Oriented Programming support so in many ways you’re forced to be Functional in JavaScript Main fancy words you will hear Pure functions Higher-order functions Recursion Functor Compose Destructuring Currying Pure functions Returns the same result given same parameters. It’s execution doesn’t depend on the state of the system. 1) Impure let number = 1; const increment = () =&gt; number += 1; increment(); // 2 2) Pure const increment = n =&gt; n + 1; increment(1); // 2 Higher-order functions Functions that operate on other functions, either by taking them as arguments or by returning them. 1) Sum const sum = (x, y) =&gt; x + y; const calculate = (fn, x, y) =&gt; fn(x, y); calculate(sum, 1, 2); // 3 2) Filter let students = [ {name: 'Anna', grade: 6}, {name:..."
		},
		{
			"title": "Introduction to Tmux",
			"link": "https://lightrains.com/blogs/tmux-tips",
			"guid": "https://lightrains.com/blogs/tmux-tips",
			"pubDate": "Sat, 03 Sep 2016 05:10:00 +0530",
			"categories": [
				"Development Tools",
				"Tmux",
				"Tools"
			],
			"author": "",
			"thumbnail": "",
			"description": "tmux is a “terminal multiplexer”, it enables a number of terminals (or windows) to be accessed and controlled from a single terminal. tmux is intended to be a simple, modern, BSD-licensed alternative to programs such as GNU screen. Install tmux. tmux depends on libevent 2.x. Download it from: libevent.org From source By default, tmux will use the utempter library to update utmp(5), if it is installed. Run configure with --disable-utempter to disable this. To build tmux from a release tarball, do: $ ./configure &amp;&amp; make $ sudo make install To get and build the latest from version control: $ git clone https://github.com/tmux/tmux.git $ cd tmux $ sh autogen.sh $ ./configure &amp;&amp; make Install tmux in Mac OSX Yes, you can do brew install tmux Starting Tmux You can start a tmux session by tmux attach or simply tmux a command. Managing the configuration. You can manage all the configurations with .tmux.conf file. Which will reside in your home folder. You can check with cat ~/.tmux.conf to see whether there is any. Multiple Pane Synchronization What setw synchronise-panes gives us is that it simultaneously sends keyboard input from one pane to the rest of the panes. (In this case, we can also see the the Elixir REPL is far superior because of the colored output.) Obviously, this demonstration is a mere party trick to impress developers and nothing more. A good use case is having to perform a repetitive operation on multiple machines. For example, imagine having a tmux session connected to four remote hosts and having to executer the exact same command on all of them. Noteworthy plugins. 1. Tmux Plugin Manager Installs and loads TMUX plugins. 2. tmux-resurrect Restore tmux environment after system restart. Tmux is great, except when you have to restart the computer. You lose all the...",
			"content": "tmux is a “terminal multiplexer”, it enables a number of terminals (or windows) to be accessed and controlled from a single terminal. tmux is intended to be a simple, modern, BSD-licensed alternative to programs such as GNU screen. Install tmux. tmux depends on libevent 2.x. Download it from: libevent.org From source By default, tmux will use the utempter library to update utmp(5), if it is installed. Run configure with --disable-utempter to disable this. To build tmux from a release tarball, do: $ ./configure &amp;&amp; make $ sudo make install To get and build the latest from version control: $ git clone https://github.com/tmux/tmux.git $ cd tmux $ sh autogen.sh $ ./configure &amp;&amp; make Install tmux in Mac OSX Yes, you can do brew install tmux Starting Tmux You can start a tmux session by tmux attach or simply tmux a command. Managing the configuration. You can manage all the configurations with .tmux.conf file. Which will reside in your home folder. You can check with cat ~/.tmux.conf to see whether there is any. Multiple Pane Synchronization What setw synchronise-panes gives us is that it simultaneously sends keyboard input from one pane to the rest of the panes. (In this case, we can also see the the Elixir REPL is far superior because of the colored output.) Obviously, this demonstration is a mere party trick to impress developers and nothing more. A good use case is having to perform a repetitive operation on multiple machines. For example, imagine having a tmux session connected to four remote hosts and having to executer the exact same command on all of them. Noteworthy plugins. 1. Tmux Plugin Manager Installs and loads TMUX plugins. 2. tmux-resurrect Restore tmux environment after system restart. Tmux is great, except when you have to restart the computer. You lose all the..."
		},
		{
			"title": "What is Private Permissioned Blockchain",
			"link": "https://lightrains.com/blogs/what-private-permissioned-blockchain",
			"guid": "https://lightrains.com/blogs/what-private-permissioned-blockchain",
			"pubDate": "Fri, 12 Aug 2016 05:10:00 +0530",
			"categories": [
				"Blockchain",
				"Private Blockchain",
				"Permissioned Blockchain"
			],
			"author": "",
			"thumbnail": "",
			"description": "Properly permissioned blockchain networks differ from unpermissioned blockchain networks solely based on the presence (or absence) of an access control layer built into the blockchain clients.\n\nThe first primary difference between a properly conceived permissioned blockchain network and an unpermissioned blockchain network is whether the participants in the network have an ability to restrict who can participate in the consensus mechanism of the blockchain’s network.\n\nPermissioned blockchain networks allow the network to appoint a group of participants in the network who are given the express authority to provide the validation of blocks of transactions. Or, to participate in the consensus mechanism.\n\nWhy do we need Permissioned Blockchain\n\nTo understand the benefits of permissioned blockchain networks to their participants, we must consider the relative advantages which they have vis a vis their unpermissioned cousins.\n\nWe must also consider the relative advantages which permissioned blockchain networks have vis a vis their cousins on the other side of the spectrum: hub and spoke distributed databases.\n\n\n  Governance Over A Permissioned Blockchain is Clearly Defined\n  More Cost Effective\n  Extra layer of security is there. (could be)\n\n\nSources\n\n  https://docs.erisindustries.com\n\n\n\n  \n    \n    Talk to one of our consultant.\n  \n\n  \n hexlxlo@xligxhtrxaxixnxs.com",
			"content": "Properly permissioned blockchain networks differ from unpermissioned blockchain networks solely based on the presence (or absence) of an access control layer built into the blockchain clients.\n\nThe first primary difference between a properly conceived permissioned blockchain network and an unpermissioned blockchain network is whether the participants in the network have an ability to restrict who can participate in the consensus mechanism of the blockchain’s network.\n\nPermissioned blockchain networks allow the network to appoint a group of participants in the network who are given the express authority to provide the validation of blocks of transactions. Or, to participate in the consensus mechanism.\n\nWhy do we need Permissioned Blockchain\n\nTo understand the benefits of permissioned blockchain networks to their participants, we must consider the relative advantages which they have vis a vis their unpermissioned cousins.\n\nWe must also consider the relative advantages which permissioned blockchain networks have vis a vis their cousins on the other side of the spectrum: hub and spoke distributed databases.\n\n\n  Governance Over A Permissioned Blockchain is Clearly Defined\n  More Cost Effective\n  Extra layer of security is there. (could be)\n\n\nSources\n\n  https://docs.erisindustries.com\n\n\n\n  \n    \n    Talk to one of our consultant.\n  \n\n  \n hexlxlo@xligxhtrxaxixnxs.com"
		},
		{
			"title": "Blockchain for Insurance Industry",
			"link": "https://lightrains.com/blogs/blockchain-for-insurance-industry",
			"guid": "https://lightrains.com/blogs/blockchain-for-insurance-industry",
			"pubDate": "Fri, 12 Aug 2016 05:10:00 +0530",
			"categories": [
				"Blockchain",
				"Whitepaper"
			],
			"author": "",
			"thumbnail": "",
			"description": "Insurance companies have been traditionally slow to drive adoption in technologies. These innovation strategies and initiatives are aimed at retaining customers and optimizing pricing and tradability of services. Insurers who have trust at the heart have begun to appreciate with technologies such as blockchain because they believe that a “trustless” system (which pushes identity management, ownership and management of data and processes to the customer) may provide genuine long-term strategic benefits. Whats is meant by trust-less: The greatest advantage of blockchains is its decentralized protocol which is often referred as “Trust to the trust-less world”. Because every part of the system is continually checking and approving the work of the others. Therefore, if any piece of information will be changed on one machine, it won’t be approved by the others as all of them hold the same record. In the banking industry, several blockchain use conditions are being integrated, which range from customer-facing repayment technology to switch and trading services.While the insurance industry (in conditions of technology adoption) lags behind banking, it is nevertheless uniquely positioned to reap the benefits of blockchain technology. Blockchain can address the competitive challenges many incumbents face, including poor customer engagement, limited growth in mature markets, and the trends of digitization. In the next, we format the most appealing insurance-related use circumstances in three categories: enabling progress, increasing efficiency, and lowering cost by automating key techniques. Potential use cases Validate authenticity, ownership, and provenance of goods as well as authenticity of documents (e.g., medical reports) Check for police theft reports/claims history as well as a person’s verified identity and detect patterns of fraudulent behavior related to a specific identity Prove date and time of policy issuance or purchase of a product/asset Confirm subsequent ownership and location changes. How CAN we keep the files on the...",
			"content": "Insurance companies have been traditionally slow to drive adoption in technologies. These innovation strategies and initiatives are aimed at retaining customers and optimizing pricing and tradability of services. Insurers who have trust at the heart have begun to appreciate with technologies such as blockchain because they believe that a “trustless” system (which pushes identity management, ownership and management of data and processes to the customer) may provide genuine long-term strategic benefits. Whats is meant by trust-less: The greatest advantage of blockchains is its decentralized protocol which is often referred as “Trust to the trust-less world”. Because every part of the system is continually checking and approving the work of the others. Therefore, if any piece of information will be changed on one machine, it won’t be approved by the others as all of them hold the same record. In the banking industry, several blockchain use conditions are being integrated, which range from customer-facing repayment technology to switch and trading services.While the insurance industry (in conditions of technology adoption) lags behind banking, it is nevertheless uniquely positioned to reap the benefits of blockchain technology. Blockchain can address the competitive challenges many incumbents face, including poor customer engagement, limited growth in mature markets, and the trends of digitization. In the next, we format the most appealing insurance-related use circumstances in three categories: enabling progress, increasing efficiency, and lowering cost by automating key techniques. Potential use cases Validate authenticity, ownership, and provenance of goods as well as authenticity of documents (e.g., medical reports) Check for police theft reports/claims history as well as a person’s verified identity and detect patterns of fraudulent behavior related to a specific identity Prove date and time of policy issuance or purchase of a product/asset Confirm subsequent ownership and location changes. How CAN we keep the files on the..."
		},
		{
			"title": "What Is Bitcoin and how is it useful",
			"link": "https://lightrains.com/blogs/bitcoin-how-is-useful",
			"guid": "https://lightrains.com/blogs/bitcoin-how-is-useful",
			"pubDate": "Tue, 09 Aug 2016 05:10:00 +0530",
			"categories": [
				"Bitcoin",
				"Cryptocurrency"
			],
			"author": "",
			"thumbnail": "",
			"description": "Bitcoin is a decentralized digital currency, created and held electronically. No one controls it. They’re not printed, produced by people, and increasingly businesses, running computers all around the world, using software that solves mathematical problems.\n\nSatoshi Nakamoto, a software developer proposed bitcoin, which was an electronic payment system based on mathematical proof. Idea was to produce a currency independent of any central authority, transferable electronically, more or less instantly, with very low transaction fees.\n\nCharacteristics of Bitcoin\n\n\n  Decentralized\n  Easy to set up\n  Anonymous\n  Transparent\n  Minimal Transaction fee\n  Fast transaction\n  Non-repudiable\n\n\nHow does one acquire bitcoins?\n\n\n  As payment for goods or services.\n  Purchase bitcoins at a Bitcoin exchange.\n  Exchange bitcoins from anyone.\n  Earn bitcoins through mining.\n\n\nAdvantage/Disadvantage of Bitcoin\n\nAdvantages:\n\n\n  Payment Freedom:- It is possible to send and receive bitcoins anywhere in the world at any time\n  Less transaction Fees:- No fee to receive bitcoins. You can choose your transaction fee and many wallets let you control how large a fee to pay when spending.\n  Risk Free:- Bitcoin transactions are secure, irreversible, and do not contain customers’ sensitive or personal information.\n  Highly secured:- Bitcoin payments can be made without personal information tied to the transaction thus offers strong protection against identity theft.\n  Neutral and Transparent:- All information about the Bitcoin money supply is available on the block chain and anybody can verify and use in real-time.\n\n\nDisadvantages:\n\n\n  Degree Of Acceptance:- Many people are still unaware of Bitcoin.\n  Volatility:- The price of the Bitcoin is volatile, it varies as per time.\n  Ongoing Development:- Bitcoin is still in the process of maturing.",
			"content": "Bitcoin is a decentralized digital currency, created and held electronically. No one controls it. They’re not printed, produced by people, and increasingly businesses, running computers all around the world, using software that solves mathematical problems.\n\nSatoshi Nakamoto, a software developer proposed bitcoin, which was an electronic payment system based on mathematical proof. Idea was to produce a currency independent of any central authority, transferable electronically, more or less instantly, with very low transaction fees.\n\nCharacteristics of Bitcoin\n\n\n  Decentralized\n  Easy to set up\n  Anonymous\n  Transparent\n  Minimal Transaction fee\n  Fast transaction\n  Non-repudiable\n\n\nHow does one acquire bitcoins?\n\n\n  As payment for goods or services.\n  Purchase bitcoins at a Bitcoin exchange.\n  Exchange bitcoins from anyone.\n  Earn bitcoins through mining.\n\n\nAdvantage/Disadvantage of Bitcoin\n\nAdvantages:\n\n\n  Payment Freedom:- It is possible to send and receive bitcoins anywhere in the world at any time\n  Less transaction Fees:- No fee to receive bitcoins. You can choose your transaction fee and many wallets let you control how large a fee to pay when spending.\n  Risk Free:- Bitcoin transactions are secure, irreversible, and do not contain customers’ sensitive or personal information.\n  Highly secured:- Bitcoin payments can be made without personal information tied to the transaction thus offers strong protection against identity theft.\n  Neutral and Transparent:- All information about the Bitcoin money supply is available on the block chain and anybody can verify and use in real-time.\n\n\nDisadvantages:\n\n\n  Degree Of Acceptance:- Many people are still unaware of Bitcoin.\n  Volatility:- The price of the Bitcoin is volatile, it varies as per time.\n  Ongoing Development:- Bitcoin is still in the process of maturing."
		},
		{
			"title": "ES6 Transpilers",
			"link": "https://lightrains.com/blogs/es6-transpilers",
			"guid": "https://lightrains.com/blogs/es6-transpilers",
			"pubDate": "Sun, 07 Aug 2016 05:10:00 +0530",
			"categories": [
				"ES6",
				"Transpiler",
				"Ecmascript 6"
			],
			"author": "",
			"thumbnail": "",
			"description": "What is a Transpiler\nA source-to-source compiler, transcompiler or transpiler is a type of compiler that takes the\nsource code of a program written in one programming language as its input and produces the\nequivalent source code in another programming language. A source-to-source compiler translates\nbetween programming languages that operate at approximately the same level of abstraction, while\na traditional compiler translates from a higher level programming language to a lower level\nprogramming language. wiki\n\nList of ES6 Transpilers\n\n  Babel: To transpile ES6 into ES5 for static builds\n  Babelify: To incorporate babel into your Gulp, Grunt, or npm run build process\n  Traceur compiler: ES6 features &gt; ES5. Includes\nclasses, generators, promises, destructuring patterns, default parameters &amp; more.\n  es6ify: Traceur compiler wrapped as a Browserify v2 transform\n\n\nES6 to ES5 Transpilation Example\nFor this example we are using Babel’s live transpiler to see the code\nin action.\n\nES6 Code\n\nimport config from './config/env';\nimport app from './config/express';\n\n// listen on port config.port\napp.listen(config.port, () =&gt; {\n  debug(`server started on port ${config.port} (${config.env})`);\n});\n\nexport default app;\n\n\n\nES5 Converted\n\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _env = require('./config/env');\n\nvar _env2 = _interopRequireDefault(_env);\n\nvar _express = require('./config/express');\n\nvar _express2 = _interopRequireDefault(_express);\n\nfunction _interopRequireDefault(obj) { return obj &amp;&amp; obj.__esModule ? obj : { default: obj }; }\n\n// listen on port config.port\n_express2.default.listen(_env2.default.port, function () {\n  debug('server started on port ' + _env2.default.port + ' (' + _env2.default.env + ')');\n});\n\nexports.default = _express2.default;\n\n\n\nSources\n\n\n  https://scotch.io\n  https://github.com/bevacqua/es6#introduction\n  https://github.com/addyosmani/es6-tools",
			"content": "What is a Transpiler\nA source-to-source compiler, transcompiler or transpiler is a type of compiler that takes the\nsource code of a program written in one programming language as its input and produces the\nequivalent source code in another programming language. A source-to-source compiler translates\nbetween programming languages that operate at approximately the same level of abstraction, while\na traditional compiler translates from a higher level programming language to a lower level\nprogramming language. wiki\n\nList of ES6 Transpilers\n\n  Babel: To transpile ES6 into ES5 for static builds\n  Babelify: To incorporate babel into your Gulp, Grunt, or npm run build process\n  Traceur compiler: ES6 features &gt; ES5. Includes\nclasses, generators, promises, destructuring patterns, default parameters &amp; more.\n  es6ify: Traceur compiler wrapped as a Browserify v2 transform\n\n\nES6 to ES5 Transpilation Example\nFor this example we are using Babel’s live transpiler to see the code\nin action.\n\nES6 Code\n\nimport config from './config/env';\nimport app from './config/express';\n\n// listen on port config.port\napp.listen(config.port, () =&gt; {\n  debug(`server started on port ${config.port} (${config.env})`);\n});\n\nexport default app;\n\n\n\nES5 Converted\n\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _env = require('./config/env');\n\nvar _env2 = _interopRequireDefault(_env);\n\nvar _express = require('./config/express');\n\nvar _express2 = _interopRequireDefault(_express);\n\nfunction _interopRequireDefault(obj) { return obj &amp;&amp; obj.__esModule ? obj : { default: obj }; }\n\n// listen on port config.port\n_express2.default.listen(_env2.default.port, function () {\n  debug('server started on port ' + _env2.default.port + ' (' + _env2.default.env + ')');\n});\n\nexports.default = _express2.default;\n\n\n\nSources\n\n\n  https://scotch.io\n  https://github.com/bevacqua/es6#introduction\n  https://github.com/addyosmani/es6-tools"
		},
		{
			"title": "Getting started with Solidity.",
			"link": "https://lightrains.com/blogs/ethereum-solidity-getting-started",
			"guid": "https://lightrains.com/blogs/ethereum-solidity-getting-started",
			"pubDate": "Mon, 01 Aug 2016 09:10:00 +0530",
			"categories": [
				"Ethereum",
				"Solidity",
				"EVM"
			],
			"author": "",
			"thumbnail": "",
			"description": "Solidity is a high-level language whose syntax is similar to that of JavaScript and it is designed to compile to code for the Ethereum Virtual Machine. As you will see, it is possible to create contracts for voting, crowdfunding, blind auctions, multi-signature wallets and more.\n\nSolidity is the programming language that we use to create Etherem based Smart Contracts.\n\nI have covered the steps to install Solidity in my previous blog Compile and Deploy Solidity\nContract\n\nData Types\n\nBooleans\n\n  bool: The possible values are constants true and false.\n\n\nOperators:\n\n\n  ! (logical negation)\n  &amp;&amp; (logical conjunction, “and”)\n  \n    \n      \n        \n           \n          (logical disjunction, “or”)\n        \n      \n    \n  \n  == (equality)\n  != (inequality)\n\n\nIntegers\n\nint / uint: Signed and unsigned integers of various sizes. Keywords uint8 to uint256 in steps of 8 (unsigned of 8 up to 256 bits) and int8 to int256. uint and int are aliases for uint256 and int256, respectively.\n\nAddress\naddress: Holds a 20 byte value (size of an Ethereum address). Address types also have members and serve as base for all contracts.\n\nNext we will look into Expressions and Control Structures\n\nSource\n\n\n  Official Docs\n  Types\n\n\n\n  \n    \n    Talk to one of our consultant.\n  \n\n  \n hexlxlo@xligxhtrxaxixnxs.com",
			"content": "Solidity is a high-level language whose syntax is similar to that of JavaScript and it is designed to compile to code for the Ethereum Virtual Machine. As you will see, it is possible to create contracts for voting, crowdfunding, blind auctions, multi-signature wallets and more.\n\nSolidity is the programming language that we use to create Etherem based Smart Contracts.\n\nI have covered the steps to install Solidity in my previous blog Compile and Deploy Solidity\nContract\n\nData Types\n\nBooleans\n\n  bool: The possible values are constants true and false.\n\n\nOperators:\n\n\n  ! (logical negation)\n  &amp;&amp; (logical conjunction, “and”)\n  \n    \n      \n        \n           \n          (logical disjunction, “or”)\n        \n      \n    \n  \n  == (equality)\n  != (inequality)\n\n\nIntegers\n\nint / uint: Signed and unsigned integers of various sizes. Keywords uint8 to uint256 in steps of 8 (unsigned of 8 up to 256 bits) and int8 to int256. uint and int are aliases for uint256 and int256, respectively.\n\nAddress\naddress: Holds a 20 byte value (size of an Ethereum address). Address types also have members and serve as base for all contracts.\n\nNext we will look into Expressions and Control Structures\n\nSource\n\n\n  Official Docs\n  Types\n\n\n\n  \n    \n    Talk to one of our consultant.\n  \n\n  \n hexlxlo@xligxhtrxaxixnxs.com"
		},
		{
			"title": "ECMAScript 6 Classes.",
			"link": "https://lightrains.com/blogs/es6-classes",
			"guid": "https://lightrains.com/blogs/es6-classes",
			"pubDate": "Mon, 01 Aug 2016 02:10:00 +0530",
			"categories": [
				"ES6",
				"Ecmascript 6",
				"ES6 Tutorials"
			],
			"author": "",
			"thumbnail": "",
			"description": "ECMAScript 6 (ES6, often referred to as Harmony) is the upcoming sixth major release of the ECMAScript language specification.The technology bringing a lot of amazing features that we will need to know. One of the main feature that introducing by the  ES6 is “Javascript Classes”.\n\nClasses\nClasses are the main  new OOP paradigm in ES6 which make code syntatic sugar.That means classes make prototype-based OO pattern much simpler and boosts interoperability.Classes supports inheritance,instance and static methods which makes ES6 more user friendly.\n\nClass body and methods\nThe body of a class is enclosed in curly braces {}.Here we can define methods or constructors.\n\nConstructor:\nA special method for creating and initializing an object created with a class.\n\nExample:\n\nclass Number{\n    constructor(num1, num2) {\n        this.num1 = num1;\n        this.num2 = num2;\n    }\n    calcSum() {\n        return this.num1 + this.num2;\n    }\n    getSum(){\n        return this.calcSum();\n    }\n}\nnumOperation = new Number(20, 10);\nconsole.log(numOperation.getSum);\n\n\n\nSubclassing using extend keyword:\nThe extends keyword is used in class declarations or class expressions to create a class as a child of another class.\n\nExample:\n\nclass Animal {\n    constructor(name) {\n        this.name = name;\n    }\n    speak() {\n        console.log(this.name + ' makes a noise.');\n    }\n}\nclass Dog extends Animal {\n    speak() {\n        console.log(this.name + ' barks.');\n    }\n}",
			"content": "ECMAScript 6 (ES6, often referred to as Harmony) is the upcoming sixth major release of the ECMAScript language specification.The technology bringing a lot of amazing features that we will need to know. One of the main feature that introducing by the  ES6 is “Javascript Classes”.\n\nClasses\nClasses are the main  new OOP paradigm in ES6 which make code syntatic sugar.That means classes make prototype-based OO pattern much simpler and boosts interoperability.Classes supports inheritance,instance and static methods which makes ES6 more user friendly.\n\nClass body and methods\nThe body of a class is enclosed in curly braces {}.Here we can define methods or constructors.\n\nConstructor:\nA special method for creating and initializing an object created with a class.\n\nExample:\n\nclass Number{\n    constructor(num1, num2) {\n        this.num1 = num1;\n        this.num2 = num2;\n    }\n    calcSum() {\n        return this.num1 + this.num2;\n    }\n    getSum(){\n        return this.calcSum();\n    }\n}\nnumOperation = new Number(20, 10);\nconsole.log(numOperation.getSum);\n\n\n\nSubclassing using extend keyword:\nThe extends keyword is used in class declarations or class expressions to create a class as a child of another class.\n\nExample:\n\nclass Animal {\n    constructor(name) {\n        this.name = name;\n    }\n    speak() {\n        console.log(this.name + ' makes a noise.');\n    }\n}\nclass Dog extends Animal {\n    speak() {\n        console.log(this.name + ' barks.');\n    }\n}"
		},
		{
			"title": "Bitcoins most Intriguing Qualities",
			"link": "https://lightrains.com/blogs/intriguing-qualities-of-bitcoin",
			"guid": "https://lightrains.com/blogs/intriguing-qualities-of-bitcoin",
			"pubDate": "Fri, 29 Jul 2016 12:23:22 +0530",
			"categories": [
				"Bitcoin",
				"Blockchain",
				"Cryptocurrency"
			],
			"author": "",
			"thumbnail": "",
			"description": "Bitcoin is an innovative payment network and a new kind of money. Find all you need to know and get started with Bitcoin on bitcoin.org.Some of Bitcoin’s Most Intriguing Qualities Bitcoin Cryptocurrency A cryptocurrency (or crypto currency) is a medium of exchange using cryptography to secure the transactions and to control the creation of additional units of the currency.[1] Cryptocurrencies are a subset of alternative currencies, or specifically of digital currencies. wiki Bitcoin and bitcoin Aren’t the Same Bitcoin with a capital ‘B’ is used when referring to the network, while the currency is spelt with a small ‘b’. There Will Only Ever Be 21 Million bitcoins we can accurately predict, almost to the exact hour, the date the 21 millionth, and last, bitcoin will enter circulation. Bitcoin is Operated by Users, Not Institutions Bitcoin is run through a peer-to-peer network, meaning that there is no central control, but rather the control is decentralised throughout the user base. bitcoins Aren’t Minted; They’re Mined Unlike traditional currency, bitcoins exist as a result of a production process called mining. People use computers to solve complex mathematical algorithms in order to introduce new bitcoins into the economy. bitcoins Are Stored in Digital Wallets, Not Banks User store their bitcoins safely online Bitcoin Transactions are Pseudonymous The true names of buyers and sellers are never revealed. Though each transaction is recorded in a public ledger (blockchain) only their wallet ID’s will be represented, bitcoin is Divisible to 1 Million Bits One bitcoin can be broken down to 1,000,000 bits. 0,00000001 of a bitcoin is known as a satoshi, Bitcoin Network is Virtually ‘Unhackable’ Bitcoin is secured by military-grade cryptography. The only considerable source ever imposing a threat would be quantum computing, which does not yet exist. Bitcoin Computes More Than 100,000 Transactions a Day...",
			"content": "Bitcoin is an innovative payment network and a new kind of money. Find all you need to know and get started with Bitcoin on bitcoin.org.Some of Bitcoin’s Most Intriguing Qualities Bitcoin Cryptocurrency A cryptocurrency (or crypto currency) is a medium of exchange using cryptography to secure the transactions and to control the creation of additional units of the currency.[1] Cryptocurrencies are a subset of alternative currencies, or specifically of digital currencies. wiki Bitcoin and bitcoin Aren’t the Same Bitcoin with a capital ‘B’ is used when referring to the network, while the currency is spelt with a small ‘b’. There Will Only Ever Be 21 Million bitcoins we can accurately predict, almost to the exact hour, the date the 21 millionth, and last, bitcoin will enter circulation. Bitcoin is Operated by Users, Not Institutions Bitcoin is run through a peer-to-peer network, meaning that there is no central control, but rather the control is decentralised throughout the user base. bitcoins Aren’t Minted; They’re Mined Unlike traditional currency, bitcoins exist as a result of a production process called mining. People use computers to solve complex mathematical algorithms in order to introduce new bitcoins into the economy. bitcoins Are Stored in Digital Wallets, Not Banks User store their bitcoins safely online Bitcoin Transactions are Pseudonymous The true names of buyers and sellers are never revealed. Though each transaction is recorded in a public ledger (blockchain) only their wallet ID’s will be represented, bitcoin is Divisible to 1 Million Bits One bitcoin can be broken down to 1,000,000 bits. 0,00000001 of a bitcoin is known as a satoshi, Bitcoin Network is Virtually ‘Unhackable’ Bitcoin is secured by military-grade cryptography. The only considerable source ever imposing a threat would be quantum computing, which does not yet exist. Bitcoin Computes More Than 100,000 Transactions a Day..."
		},
		{
			"title": "ES6 Data Structures",
			"link": "https://lightrains.com/blogs/es6-data-structres",
			"guid": "https://lightrains.com/blogs/es6-data-structres",
			"pubDate": "Tue, 26 Jul 2016 09:10:12 +0530",
			"categories": [
				"ES6",
				"ES6 Tutorials",
				"Ecmascript 6"
			],
			"author": "",
			"thumbnail": "",
			"description": "ES6 introduces many new features to embrace the developer as well as the browsers to perform\nin a optimal performant way.\n\nSet\nSet is new type of data structure that we can use to store Unique values which can be of\nany type but they must all be uniqie.\n\nCreate a Set\n\nTo create a set we use Set constructor var mySet = new Set();\n\nAdd Values to set\n\nlet myArray = [1, 4, 1, 5, 5, 7, 8, 9, 0, 0]\nlet mySet = new Set(myArray)\n\n\n\nNow if you do a console.log(mySet); you will see\nSet {1, 4, 5, 7, 8, 9, 0}\n\nMap\n\nMap is similar to Set but it manges key-value pair instead of individual values.\n\nCreate a Map\n\nvar myMap = new Map(); will create an instance of Map and to add values to it we can do let\nmyOtherMap = new Map([['a', 2], [1, 'b']])\n\nconsole.log(myOtherMap); will show Map {\"a\" =&gt; 2, 1 =&gt; \"b\"}\n\nWeakSet and WeakMap\nSimilar to regular Map and Set but the difference is that the object references inside them are\nheld weakly. So it wont prevent garbage collection.",
			"content": "ES6 introduces many new features to embrace the developer as well as the browsers to perform\nin a optimal performant way.\n\nSet\nSet is new type of data structure that we can use to store Unique values which can be of\nany type but they must all be uniqie.\n\nCreate a Set\n\nTo create a set we use Set constructor var mySet = new Set();\n\nAdd Values to set\n\nlet myArray = [1, 4, 1, 5, 5, 7, 8, 9, 0, 0]\nlet mySet = new Set(myArray)\n\n\n\nNow if you do a console.log(mySet); you will see\nSet {1, 4, 5, 7, 8, 9, 0}\n\nMap\n\nMap is similar to Set but it manges key-value pair instead of individual values.\n\nCreate a Map\n\nvar myMap = new Map(); will create an instance of Map and to add values to it we can do let\nmyOtherMap = new Map([['a', 2], [1, 'b']])\n\nconsole.log(myOtherMap); will show Map {\"a\" =&gt; 2, 1 =&gt; \"b\"}\n\nWeakSet and WeakMap\nSimilar to regular Map and Set but the difference is that the object references inside them are\nheld weakly. So it wont prevent garbage collection."
		},
		{
			"title": "Function parameters in es6",
			"link": "https://lightrains.com/blogs/function-parameteres-ecmascript6-es6",
			"guid": "https://lightrains.com/blogs/function-parameteres-ecmascript6-es6",
			"pubDate": "Wed, 20 Jul 2016 09:12:00 +0530",
			"categories": [
				"ES6",
				"ES6 Tutorials",
				"Ecmascript 6"
			],
			"author": "",
			"thumbnail": "",
			"description": "There are 2 types of function parameters available in es6,\n\n\n  Default Parameters\n  Rest Parameters\n\n\nDefault Parameter\nDefault parameter are a way to pass a value to the function parameter when there is no value is being passed by the callee during invocation.\n\nWe specify this value when defining a function,\n\nfunction printName ( name = 'there' ) {\n  return `Hello,  ${name}`\n}\n\n\nWe can even use the default parameter of one parameter as part of an expression for another\nparamter. For eg:\n\nfunction printName ( name = 'there', fullname = name + ' lastName' ) {\n  return `Hello,  ${name} -  ${fullname} `\n}\n\n\n\nRest Parameters\nThe rest parameter syntax allows us to represent an indefinite number of arguments as an array.\n\nThis is achieved by using a new operator called Spread Operator which is represented by ... 3dots\n\nSpread Operator\nIt is used when we want to pass an array to a function as individual arguments of that function. For\neg:\n\nfunction sum (x, y, z ) {\n  return x + y + z;\n}\nlet values = [1, 2, 3]\n// notice the usage of ...\nsum(...values)\n\n\n\nAnother Example\nfunction f(x, ...y) {\n // y is an Array\n return x * y.length;\n}\nf(3, \"hello\", true) == 6\n\n\n\nIf the last named argument of a function is prefixed with ..., it becomes an array whose elements from 0 (inclusive) to theArgs.length (exclusive) are supplied by the actual arguments passed to the function.\n\nIn the above example, theArgs would collect the third argument of the function (because the first one is mapped to a, and the second to b) and all the consecutive argument\n\nSources:\n\n\n  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters\n  https://lightrains.com/blogs/es6#default–rest–spread",
			"content": "There are 2 types of function parameters available in es6,\n\n\n  Default Parameters\n  Rest Parameters\n\n\nDefault Parameter\nDefault parameter are a way to pass a value to the function parameter when there is no value is being passed by the callee during invocation.\n\nWe specify this value when defining a function,\n\nfunction printName ( name = 'there' ) {\n  return `Hello,  ${name}`\n}\n\n\nWe can even use the default parameter of one parameter as part of an expression for another\nparamter. For eg:\n\nfunction printName ( name = 'there', fullname = name + ' lastName' ) {\n  return `Hello,  ${name} -  ${fullname} `\n}\n\n\n\nRest Parameters\nThe rest parameter syntax allows us to represent an indefinite number of arguments as an array.\n\nThis is achieved by using a new operator called Spread Operator which is represented by ... 3dots\n\nSpread Operator\nIt is used when we want to pass an array to a function as individual arguments of that function. For\neg:\n\nfunction sum (x, y, z ) {\n  return x + y + z;\n}\nlet values = [1, 2, 3]\n// notice the usage of ...\nsum(...values)\n\n\n\nAnother Example\nfunction f(x, ...y) {\n // y is an Array\n return x * y.length;\n}\nf(3, \"hello\", true) == 6\n\n\n\nIf the last named argument of a function is prefixed with ..., it becomes an array whose elements from 0 (inclusive) to theArgs.length (exclusive) are supplied by the actual arguments passed to the function.\n\nIn the above example, theArgs would collect the third argument of the function (because the first one is mapped to a, and the second to b) and all the consecutive argument\n\nSources:\n\n\n  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters\n  https://lightrains.com/blogs/es6#default–rest–spread"
		},
		{
			"title": "Common useful JavaScript snippets for geth",
			"link": "https://lightrains.com/blogs/useful-ethereum-geth-javascript-snippets",
			"guid": "https://lightrains.com/blogs/useful-ethereum-geth-javascript-snippets",
			"pubDate": "Fri, 15 Jul 2016 11:19:48 +0530",
			"categories": [
				"Blockchain",
				"Ethereum",
				"geth",
				"go-ethereum"
			],
			"author": "",
			"thumbnail": "",
			"description": "This is a collection of common useful scripts that are handy when you do any kind of developemt on the Ethereum Virtual Machine aka EVM. This collection of scripts are availabe in github niksmac/ethereum-scripts 1. Print Block Details This function is uswful when you want to print the details of a block in the console function printBlock(block) { console.log(\"Block number : \" + block.number + \"\\n\" + \" hash : \" + block.hash + \"\\n\" + \" parentHash : \" + block.parentHash + \"\\n\" + \" nonce : \" + block.nonce + \"\\n\" + \" sha3Uncles : \" + block.sha3Uncles + \"\\n\" + \" logsBloom : \" + block.logsBloom + \"\\n\" + \" transactionsRoot: \" + block.transactionsRoot + \"\\n\" + \" stateRoot : \" + block.stateRoot + \"\\n\" + \" miner : \" + block.miner + \"\\n\" + \" difficulty : \" + block.difficulty + \"\\n\" + \" totalDifficulty : \" + block.totalDifficulty + \"\\n\" + \" extraData : \" + block.extraData + \"\\n\" + \" size : \" + block.size + \"\\n\" + \" gasLimit : \" + block.gasLimit + \"\\n\" + \" gasUsed : \" + block.gasUsed + \"\\n\" + \" timestamp : \" + block.timestamp + \"\\n\" + \" transactions : \" + block.transactions + \"\\n\" + \" uncles : \" + block.uncles); if (block.transactions != null) { console.log(\"--- transactions ---\"); block.transactions.forEach( function(e) { printTransaction(e); }) } } 2. Check all Balances Can be used to cheak balances of all accounts inside your keystore; ie, you own both the keys. function checkAllBalances() { var i =0; eth.accounts.forEach( function(e){ console.log(\" eth.accounts[\"+i+\"]: \" + e + \" \\tbalance: \" + web3.fromWei(eth.getBalance(e), \"ether\") + \" ether\"); i++; }) }; 3. Get Account Balances And Including TheDAO Tokens function padTokens(s, n) { var o = s.toPrecision(n); while (o.length &lt; n) {...",
			"content": "This is a collection of common useful scripts that are handy when you do any kind of developemt on the Ethereum Virtual Machine aka EVM. This collection of scripts are availabe in github niksmac/ethereum-scripts 1. Print Block Details This function is uswful when you want to print the details of a block in the console function printBlock(block) { console.log(\"Block number : \" + block.number + \"\\n\" + \" hash : \" + block.hash + \"\\n\" + \" parentHash : \" + block.parentHash + \"\\n\" + \" nonce : \" + block.nonce + \"\\n\" + \" sha3Uncles : \" + block.sha3Uncles + \"\\n\" + \" logsBloom : \" + block.logsBloom + \"\\n\" + \" transactionsRoot: \" + block.transactionsRoot + \"\\n\" + \" stateRoot : \" + block.stateRoot + \"\\n\" + \" miner : \" + block.miner + \"\\n\" + \" difficulty : \" + block.difficulty + \"\\n\" + \" totalDifficulty : \" + block.totalDifficulty + \"\\n\" + \" extraData : \" + block.extraData + \"\\n\" + \" size : \" + block.size + \"\\n\" + \" gasLimit : \" + block.gasLimit + \"\\n\" + \" gasUsed : \" + block.gasUsed + \"\\n\" + \" timestamp : \" + block.timestamp + \"\\n\" + \" transactions : \" + block.transactions + \"\\n\" + \" uncles : \" + block.uncles); if (block.transactions != null) { console.log(\"--- transactions ---\"); block.transactions.forEach( function(e) { printTransaction(e); }) } } 2. Check all Balances Can be used to cheak balances of all accounts inside your keystore; ie, you own both the keys. function checkAllBalances() { var i =0; eth.accounts.forEach( function(e){ console.log(\" eth.accounts[\"+i+\"]: \" + e + \" \\tbalance: \" + web3.fromWei(eth.getBalance(e), \"ether\") + \" ether\"); i++; }) }; 3. Get Account Balances And Including TheDAO Tokens function padTokens(s, n) { var o = s.toPrecision(n); while (o.length &lt; n) {..."
		},
		{
			"title": "Introduction to IPFS",
			"link": "https://lightrains.com/blogs/ipfs-introduction",
			"guid": "https://lightrains.com/blogs/ipfs-introduction",
			"pubDate": "Tue, 05 Jul 2016 00:12:49 +0530",
			"categories": [
				"IPFS",
				"Decentralization"
			],
			"author": "",
			"thumbnail": "",
			"description": "IPFS is a peer-to-peer distributed file system that seeks to connect all computing devices with the same system of files. In some ways, IPFS is similar to the World Wide Web, but IPFS could be seen as a single BitTorrent swarm, exchanging objects within one Git repository. In other words, IPFS provides a high-throughput, content-addressed block storage model, with content-addressed hyperlinks. What is IPFS? From their README: IPFS is a distributed file system that seeks to connect all computing devices with the same system of files. In some ways, this is similar to the original aims of the Web, but IPFS is actually more similar to a single bittorrent swarm exchanging git objects. IPFS could become a new major subsystem of the internet. If built right, it could complement or replace HTTP. It could complement or replace even more. It sounds crazy. It is crazy. HTTP is inefficient and expensive HTTP downloads a file from a single computer at a time, instead of getting pieces from multiple computers simultaneously. With video delivery, a P2P approach could save 60% in bandwidth costs. The web’s centralization limits opportunity The Internet has been one of the great equalizers in human history and a real accelerator of innovation. But the increasing consolidation of control is a threat to that. Our apps are addicted to the backbone Developing world. Offline. Natural disasters. Intermittent connections. All trivial compared to interplanetary networking. The networks we’re using are so 20th Century. We can do better. How IPFS works Each file and all of the blocks within it are given a unique fingerprint called a cryptographic hash. IPFS removes duplications across the network and tracks version history for every file. Each network node stores only content it is interested in, and some indexing information that helps figure out who...",
			"content": "IPFS is a peer-to-peer distributed file system that seeks to connect all computing devices with the same system of files. In some ways, IPFS is similar to the World Wide Web, but IPFS could be seen as a single BitTorrent swarm, exchanging objects within one Git repository. In other words, IPFS provides a high-throughput, content-addressed block storage model, with content-addressed hyperlinks. What is IPFS? From their README: IPFS is a distributed file system that seeks to connect all computing devices with the same system of files. In some ways, this is similar to the original aims of the Web, but IPFS is actually more similar to a single bittorrent swarm exchanging git objects. IPFS could become a new major subsystem of the internet. If built right, it could complement or replace HTTP. It could complement or replace even more. It sounds crazy. It is crazy. HTTP is inefficient and expensive HTTP downloads a file from a single computer at a time, instead of getting pieces from multiple computers simultaneously. With video delivery, a P2P approach could save 60% in bandwidth costs. The web’s centralization limits opportunity The Internet has been one of the great equalizers in human history and a real accelerator of innovation. But the increasing consolidation of control is a threat to that. Our apps are addicted to the backbone Developing world. Offline. Natural disasters. Intermittent connections. All trivial compared to interplanetary networking. The networks we’re using are so 20th Century. We can do better. How IPFS works Each file and all of the blocks within it are given a unique fingerprint called a cryptographic hash. IPFS removes duplications across the network and tracks version history for every file. Each network node stores only content it is interested in, and some indexing information that helps figure out who..."
		},
		{
			"title": "What is DAG in Ethereum Blockchain",
			"link": "https://lightrains.com/blogs/dag-ethereum-blockchain",
			"guid": "https://lightrains.com/blogs/dag-ethereum-blockchain",
			"pubDate": "Sun, 03 Jul 2016 00:07:20 +0530",
			"categories": [
				"Blockchain",
				"DAG",
				"Principles"
			],
			"author": "",
			"thumbnail": "",
			"description": "Dagger Hashimoto is a proposed spec for the mining algorithm for Ethereum 1.0. Dagger Hashimoto aims to simultaneously satisfy two goals:\n\n\n  ASIC-resistance: the benefit from creating specialized hardware for the algorithm should be as small as possible, ideally to the point that even in an economy where ASICs have been developed the speedup is sufficiently small that it is still marginally profitable for users on ordinary computers to mine with spare CPU power.\n  Light client verifiability: a block should be relatively efficiently verifiable by a light client.\n\n\nWhy do we need DAG in Ethereum?\nEthereum uses Ethash (Proof of Work system). as of now \nEthash PoW is memory hard, making it basically ASIC resistant. This basically means that calculating the PoW requires choosing subsets of a fixed resource dependent on the nonce and block header. This resource (a few gigabyte size data) is called a DAG. Clients wishing to store the DAG in a cache should conform to this spec in order to share the cache with other clients:\n\nWhere is DAG stored\nThe DAG should be stored in a 1GB dump (for the initial epoch, anyway), in a file:\n\nMac/Linux: $(HOME)/.ethash/full-R&lt;REVISION&gt;-&lt;SEEDHASH&gt;\nWindows: $(HOME)/Appdata/Local/Ethash/full-R&lt;REVISION&gt;-&lt;SEEDHASH&gt;\n\nFormat\n\nEach file should begin with an 8-byte magic number, 0xfee1deadbaddcafe, written in little-endian format (i.e., bytes fe ca dd ba ad de e1 fe).\n\nThe Ethash algorithm expects the DAG as a two-dimensional array of uint32s (4-byte unsigned ints), with dimension (n × 16) where n is a large number. (n starts at 16777186 and grows from there.) Following the magic number, the rows of the DAG should be written sequentially into the file, with no delimiter between rows and each unint32 encoded in little-endian format.\n\nSources\n\n  Dagger-Hashimoto\n  Ethash DAG\n  Directed acyclic graph - In mathematics and computer science",
			"content": "Dagger Hashimoto is a proposed spec for the mining algorithm for Ethereum 1.0. Dagger Hashimoto aims to simultaneously satisfy two goals:\n\n\n  ASIC-resistance: the benefit from creating specialized hardware for the algorithm should be as small as possible, ideally to the point that even in an economy where ASICs have been developed the speedup is sufficiently small that it is still marginally profitable for users on ordinary computers to mine with spare CPU power.\n  Light client verifiability: a block should be relatively efficiently verifiable by a light client.\n\n\nWhy do we need DAG in Ethereum?\nEthereum uses Ethash (Proof of Work system). as of now \nEthash PoW is memory hard, making it basically ASIC resistant. This basically means that calculating the PoW requires choosing subsets of a fixed resource dependent on the nonce and block header. This resource (a few gigabyte size data) is called a DAG. Clients wishing to store the DAG in a cache should conform to this spec in order to share the cache with other clients:\n\nWhere is DAG stored\nThe DAG should be stored in a 1GB dump (for the initial epoch, anyway), in a file:\n\nMac/Linux: $(HOME)/.ethash/full-R&lt;REVISION&gt;-&lt;SEEDHASH&gt;\nWindows: $(HOME)/Appdata/Local/Ethash/full-R&lt;REVISION&gt;-&lt;SEEDHASH&gt;\n\nFormat\n\nEach file should begin with an 8-byte magic number, 0xfee1deadbaddcafe, written in little-endian format (i.e., bytes fe ca dd ba ad de e1 fe).\n\nThe Ethash algorithm expects the DAG as a two-dimensional array of uint32s (4-byte unsigned ints), with dimension (n × 16) where n is a large number. (n starts at 16777186 and grows from there.) Following the magic number, the rows of the DAG should be written sequentially into the file, with no delimiter between rows and each unint32 encoded in little-endian format.\n\nSources\n\n  Dagger-Hashimoto\n  Ethash DAG\n  Directed acyclic graph - In mathematics and computer science"
		},
		{
			"title": "ECMAScript 6",
			"link": "https://lightrains.com/blogs/es6",
			"guid": "https://lightrains.com/blogs/es6",
			"pubDate": "Thu, 30 Jun 2016 01:19:48 +0530",
			"categories": [
				"ES6",
				"ECMAScript 2015",
				"Escamscript 6",
				"ES6 Tutorials"
			],
			"author": "",
			"thumbnail": "",
			"description": "ECMAScript 6, also known as ECMAScript 2015, is the latest version of the ECMAScript standard. ES6 is a significant update to the language, and the first update to the language since ES5 was standardized in 2009. Implementation of these features in major JavaScript engines is underway now. Content is copied shamelessly from lukehoban/es6features ES6 includes the following new features: arrows classes enhanced object literals template strings destructuring default + rest + spread let + const iterators + for..of generators unicode modules module loaders map + set + weakmap + weakset proxies symbols subclassable built-ins promises math + number + string + array + object APIs binary and octal literals reflect api tail calls ECMAScript 6 Features Arrows Arrows are a function shorthand using the =&gt; syntax. They are syntactically similar to the related feature in C#, Java 8 and CoffeeScript. They support both statement block bodies as well as expression bodies which return the value of the expression. Unlike functions, arrows share the same lexical this as their surrounding code. // Expression bodies var odds = evens.map(v =&gt; v + 1); var nums = evens.map((v, i) =&gt; v + i); var pairs = evens.map(v =&gt; ({even: v, odd: v + 1})); // Statement bodies nums.forEach(v =&gt; { if (v % 5 === 0) fives.push(v); }); // Lexical this var bob = { _name: \"Bob\", _friends: [], printFriends() { this._friends.forEach(f =&gt; console.log(this._name + \" knows \" + f)); } } More info: MDN Arrow Functions Classes ES6 classes are a simple sugar over the prototype-based OO pattern. Having a single convenient declarative form makes class patterns easier to use, and encourages interoperability. Classes support prototype-based inheritance, super calls, instance and static methods and constructors. class SkinnedMesh extends THREE.Mesh { constructor(geometry, materials) { super(geometry, materials); this.idMatrix = SkinnedMesh.defaultMatrix(); this.bones = []; this.boneMatrices...",
			"content": "ECMAScript 6, also known as ECMAScript 2015, is the latest version of the ECMAScript standard. ES6 is a significant update to the language, and the first update to the language since ES5 was standardized in 2009. Implementation of these features in major JavaScript engines is underway now. Content is copied shamelessly from lukehoban/es6features ES6 includes the following new features: arrows classes enhanced object literals template strings destructuring default + rest + spread let + const iterators + for..of generators unicode modules module loaders map + set + weakmap + weakset proxies symbols subclassable built-ins promises math + number + string + array + object APIs binary and octal literals reflect api tail calls ECMAScript 6 Features Arrows Arrows are a function shorthand using the =&gt; syntax. They are syntactically similar to the related feature in C#, Java 8 and CoffeeScript. They support both statement block bodies as well as expression bodies which return the value of the expression. Unlike functions, arrows share the same lexical this as their surrounding code. // Expression bodies var odds = evens.map(v =&gt; v + 1); var nums = evens.map((v, i) =&gt; v + i); var pairs = evens.map(v =&gt; ({even: v, odd: v + 1})); // Statement bodies nums.forEach(v =&gt; { if (v % 5 === 0) fives.push(v); }); // Lexical this var bob = { _name: \"Bob\", _friends: [], printFriends() { this._friends.forEach(f =&gt; console.log(this._name + \" knows \" + f)); } } More info: MDN Arrow Functions Classes ES6 classes are a simple sugar over the prototype-based OO pattern. Having a single convenient declarative form makes class patterns easier to use, and encourages interoperability. Classes support prototype-based inheritance, super calls, instance and static methods and constructors. class SkinnedMesh extends THREE.Mesh { constructor(geometry, materials) { super(geometry, materials); this.idMatrix = SkinnedMesh.defaultMatrix(); this.bones = []; this.boneMatrices..."
		},
		{
			"title": "Evolving the Identity",
			"link": "https://lightrains.com/blogs/new-brand-identity-lightrains-tech",
			"guid": "https://lightrains.com/blogs/new-brand-identity-lightrains-tech",
			"pubDate": "Thu, 23 Jun 2016 01:19:48 +0530",
			"categories": [
				"Brand",
				"Typography"
			],
			"author": "",
			"thumbnail": "",
			"description": "Big news! Today, after five years, we’re releasing an updated brand identity, which includes a new logo, colors, and font. You’ll see the new look anywhere we’re out in public, like our website, Facebook, and Twitter; very soon you’ll see it in all of our products, as well.\n\nWe started by distilling the essence of our brand down to its colors on a clean white background—and built it back up.\n\nOur design goal was to better match how we look to our values and the users we serve. A small team inside the company worked to find something that appeared crisp, approachable, smart, friendly, and connected.\n\nThough it was time for change,\nWe’re still the same team: focused on Consulting &amp; Development on Blockchain, Drupal and ES6.\n\nAs we begin this new chapter in Vision’s history, we are appreciative of each one of our customers, who collaborate with us daily to create next generation technology. We look forward to continued partnership and great things to come.\n\nSincerely,\n\nNikhil Mohan\nCOO",
			"content": "Big news! Today, after five years, we’re releasing an updated brand identity, which includes a new logo, colors, and font. You’ll see the new look anywhere we’re out in public, like our website, Facebook, and Twitter; very soon you’ll see it in all of our products, as well.\n\nWe started by distilling the essence of our brand down to its colors on a clean white background—and built it back up.\n\nOur design goal was to better match how we look to our values and the users we serve. A small team inside the company worked to find something that appeared crisp, approachable, smart, friendly, and connected.\n\nThough it was time for change,\nWe’re still the same team: focused on Consulting &amp; Development on Blockchain, Drupal and ES6.\n\nAs we begin this new chapter in Vision’s history, we are appreciative of each one of our customers, who collaborate with us daily to create next generation technology. We look forward to continued partnership and great things to come.\n\nSincerely,\n\nNikhil Mohan\nCOO"
		},
		{
			"title": "What is a DAO aka Decentralized Autonomous Organization",
			"link": "https://lightrains.com/blogs/what-is-dao-decentralized-autonomous-organization",
			"guid": "https://lightrains.com/blogs/what-is-dao-decentralized-autonomous-organization",
			"pubDate": "Thu, 23 Jun 2016 01:19:48 +0530",
			"categories": [
				"DAO",
				"The DAO"
			],
			"author": "",
			"thumbnail": "",
			"description": "A Decentralized autonomous organizations (“DAO”) is a new type of organization, best comparable to a digital company, but without an attached legal entity. Made from irrefutable computer code, it is operated entirely by its community Essentially, it’s a non-human specific entity, who’s sole duty is to abide by a specific programmatic set of rules; or by the rules granted to it by decentralized consensus (majority decides what to do in a distributed manner). So far, all contracts we listed were owned and executed by other accounts probably held by humans. But there is no discrimination against robots or humans in the Ethereum ecosystem and contracts can create arbitrary actions like any other account would. Contracts can own tokens, participate in crowdsales, and even be voting members of other contracts. “On the Blockchain, no one knows you’re a fridge” - Richard Brown What is a DAO token A DAO leverages smart contracts on the Ethereum blockchain so that anyone, anywhere in the world can be empowered to participate. In exchange for their early help, participants receive DAO tokens which hold many benefits. Owning DAO tokens functions in a similar way to having shareholder rights in an actual company. By owning DAO tokens… You can submit proposals for funding You can vote on which proposals are funded Receive profits from funded projects Technical The code of a given DAO will be difficult to alter once the system is up and running, including bug fixes that would be trivial in centralised code. Corrections for a DAO would require writing new code and agreement to migrate all the funds. Although the code is visible to all, it is hard to repair, thus leaving known security holes open to exploitation unless a moratorium is called to enable bug fixing. wiki Then there is The DAO...",
			"content": "A Decentralized autonomous organizations (“DAO”) is a new type of organization, best comparable to a digital company, but without an attached legal entity. Made from irrefutable computer code, it is operated entirely by its community Essentially, it’s a non-human specific entity, who’s sole duty is to abide by a specific programmatic set of rules; or by the rules granted to it by decentralized consensus (majority decides what to do in a distributed manner). So far, all contracts we listed were owned and executed by other accounts probably held by humans. But there is no discrimination against robots or humans in the Ethereum ecosystem and contracts can create arbitrary actions like any other account would. Contracts can own tokens, participate in crowdsales, and even be voting members of other contracts. “On the Blockchain, no one knows you’re a fridge” - Richard Brown What is a DAO token A DAO leverages smart contracts on the Ethereum blockchain so that anyone, anywhere in the world can be empowered to participate. In exchange for their early help, participants receive DAO tokens which hold many benefits. Owning DAO tokens functions in a similar way to having shareholder rights in an actual company. By owning DAO tokens… You can submit proposals for funding You can vote on which proposals are funded Receive profits from funded projects Technical The code of a given DAO will be difficult to alter once the system is up and running, including bug fixes that would be trivial in centralised code. Corrections for a DAO would require writing new code and agreement to migrate all the funds. Although the code is visible to all, it is hard to repair, thus leaving known security holes open to exploitation unless a moratorium is called to enable bug fixing. wiki Then there is The DAO..."
		},
		{
			"title": "Compile and Deploy Solidity Contract",
			"link": "https://lightrains.com/blogs/compile-deploy-solidity-contract-ethereum-console-geth-part-1",
			"guid": "https://lightrains.com/blogs/compile-deploy-solidity-contract-ethereum-console-geth-part-1",
			"pubDate": "Fri, 17 Jun 2016 11:19:48 +0530",
			"categories": [
				"Blockchain",
				"Smart Contract"
			],
			"author": "",
			"thumbnail": "",
			"description": "Contracts live on the blockchain in an Ethereum-specific binary format (Ethereum Virtual Machine (=EVM) bytecode). This tutorial explains how to deploy the byte code to Ethereum Blockchain For the frontier release, geth supports solidity compilation through system call to solc, the command line solidity compiler by Christian R. and Lefteris K. Step 1. Install Solidity Compiler Solc Easy way Its very easy to install solc using npm the package manager for NodeJS the command is npm install solc Easier way Browser-Solidity If you just want to try Solidity for small contracts, you can try browser-solidity which does not need any installation. If you want to use it without connection to the Internet, you can also just save the page locally or clone http://github.com/chriseth/browser-solidity. Building from Source Assuming you are using Ubuntu 14.04 sudo apt-add-repository ppa:george-edison55/cmake-3.x sudo apt-get -y update sudo apt-get -y install language-pack-en-base sudo dpkg-reconfigure locales sudo apt-get -y install software-properties-common sudo add-apt-repository -y ppa:ethereum/ethereum sudo add-apt-repository -y ppa:ethereum/ethereum-dev sudo apt-get -y update sudo apt-get -y upgrade And pull the solidity source code git clone --recursive https://github.com/ethereum/webthree-umbrella.git cd webthree-umbrella ./webthree-helpers/scripts/ethupdate.sh --no-push --simple-pull --project solidity # update Solidity repo ./webthree-helpers/scripts/ethbuild.sh --no-git --project solidity --all --cores 4 -DEVMJIT=0 Step 2. Verify Solidity Compiler To ensure solc is installed and ready to use, you can verify it by running eth.getCompilers() in geth console If you have it installed, it should output something like this: ['Solidity' ] Bonus. Compile a simple contract Let us take this simple contract source: source = \"contract test { function multiply(uint a) returns(uint d) { return a * 7; } }\" This contract offers a unary method: called with a positive integer a, it returns a * 7. You are ready to compile solidity code in the geth JS console using eth.compile.solidity &gt; contract = eth.compile.solidity(source).test { code:...",
			"content": "Contracts live on the blockchain in an Ethereum-specific binary format (Ethereum Virtual Machine (=EVM) bytecode). This tutorial explains how to deploy the byte code to Ethereum Blockchain For the frontier release, geth supports solidity compilation through system call to solc, the command line solidity compiler by Christian R. and Lefteris K. Step 1. Install Solidity Compiler Solc Easy way Its very easy to install solc using npm the package manager for NodeJS the command is npm install solc Easier way Browser-Solidity If you just want to try Solidity for small contracts, you can try browser-solidity which does not need any installation. If you want to use it without connection to the Internet, you can also just save the page locally or clone http://github.com/chriseth/browser-solidity. Building from Source Assuming you are using Ubuntu 14.04 sudo apt-add-repository ppa:george-edison55/cmake-3.x sudo apt-get -y update sudo apt-get -y install language-pack-en-base sudo dpkg-reconfigure locales sudo apt-get -y install software-properties-common sudo add-apt-repository -y ppa:ethereum/ethereum sudo add-apt-repository -y ppa:ethereum/ethereum-dev sudo apt-get -y update sudo apt-get -y upgrade And pull the solidity source code git clone --recursive https://github.com/ethereum/webthree-umbrella.git cd webthree-umbrella ./webthree-helpers/scripts/ethupdate.sh --no-push --simple-pull --project solidity # update Solidity repo ./webthree-helpers/scripts/ethbuild.sh --no-git --project solidity --all --cores 4 -DEVMJIT=0 Step 2. Verify Solidity Compiler To ensure solc is installed and ready to use, you can verify it by running eth.getCompilers() in geth console If you have it installed, it should output something like this: ['Solidity' ] Bonus. Compile a simple contract Let us take this simple contract source: source = \"contract test { function multiply(uint a) returns(uint d) { return a * 7; } }\" This contract offers a unary method: called with a positive integer a, it returns a * 7. You are ready to compile solidity code in the geth JS console using eth.compile.solidity &gt; contract = eth.compile.solidity(source).test { code:..."
		}
	]
